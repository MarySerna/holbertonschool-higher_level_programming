0. Integers addition
======================

Using ``Add integer``
-------------------

 a and b must be integers or floats, 
 otherwise raise a TypeError exception with the message
 a must be an integer or b must be an integer

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

    >>> add_integer(7, 7)
    14

Should return the sum of two integers:
    >>> add_integer(-7, 5)
    -2

Should return the sum of two integers:
    >>> add_integer(0.2, 5)
    5

Should return the sum of two integers:
    >>> add_integer(0.3, -5)
    -5

Should return the sum of two integers:
    >>> add_integer(-4, -8)
    -12

Should return the sum of two integers:
    >>> add_integer(-0.3, 7)
    7

Should return the sum of two integers:
    >>> add_integer(5.3, 3.7)
    8

Should return the sum of two integers:
    >>> add_integer(5.3, -0.7)
    5

Should return the sum of two integers:
    >>> add_integer(-5.3, -1.7)
    -6

Should return the sum of two integers:
    >>> add_integer(8)
    106

Should return the sum of two integers:
    >>> add_integer(10.5)
    108

Should return the sum of two integers:
    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Should return the sum of two integers:
    >>> add_integer("hi world!!")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return the sum of a string and an integers:
    >>> add_integer('4', 7)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return the sum of two string:
    >>> add_integer("hi", "bye")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return the sum only None:
    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return the sum of two integers:
    >>> add_integer(7, None)
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Should return the sum of two elements:
    >>> add_integer(hi, None)
    Traceback (most recent call last):
    ...
    NameError: name 'hi' is not defined

Should return the sum only list:
    >>> add_integer([2,3,4], 5)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return the sum only Tupla:
    >>> add_integer((1,2,3,4), 5)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return the sum only Dict:
    >>> add_integer({'casa': 'bonita'})
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return the sum only Dict:
    >>> add_integer({2,6,8},5)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return the sum only Dict:
    >>> add_integer('casa', )
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Should return the sum only Dict:
    >>> add_integer(9, 'bonita')
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer
